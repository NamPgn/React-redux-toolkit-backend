let getAll,get,addPost,deletePost,editPost;_db3‍.x([["getAllProducts",()=>getAllProducts],["getOne",()=>getOne],["add",()=>add],["delete_",()=>delete_],["edit",()=>edit]]);_db3‍.w("../services/products",[["getAll",["getAll"],function(v){getAll=v}],["get",["get"],function(v){get=v}],["addPost",["addPost"],function(v){addPost=v}],["deletePost",["deletePost"],function(v){deletePost=v}],["editPost",["editPost"],function(v){editPost=v}]]);

       const getAllProducts = async (req, res) => {
  try {
    const data = await getAll();
    res.json(data);
  } catch (error) {
    return res.status(400).json({
      message: "Lỗi rồi"
    })
  }
}

       const getOne = async (req, res) => {
  try {
    const id = req.params.id;
    _db3‍.g.console.log("id", id)
    const data = await get(id)
    res.json(data);
  } catch (error) {
    _db3‍.g.console.log(error)
    return res.status(400).json({
      message: "Không ìm thấy bài viết"
    })
  }
}

       const add = async (req, res) => {
  try {
    const payload = req.body;
    await addPost(payload);
  } catch (error) {
    return res.status(400).json({
      message: "Không thêm đc bài viết"
    })
  }
}

       const delete_ = async (req, res) => {
  try {
    const id = req.params;
    await deletePost(id);
  } catch (error) {
    return res.status(400).json({
      message: "Lỗi rồi"
    })
  }
}

       const edit = async (req, res) => {
  try {
    const data = req.body;
    const id = req.params;
    await editPost(id, data)
  } catch (error) {
    return res.status(400).json({
      message: "Không sửa đưcọ bro"
    })
  }
} 